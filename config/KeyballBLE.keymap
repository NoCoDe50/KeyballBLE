#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                  &kp T                                                   &kp Y       &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                  &kp G        &mkp LCLK                   &kp DELETE     &kp H       &kp J  &lt 5 K    &kp L    &kp SEMI
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                  &kp B        &mkp RCLK                   &kp BACKSPACE  &kp N       &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 INT5  &lt 1 SPACE  &lt_to_layer_0 3 GRAVE      &kp ENTER      &lt 2 INT4                             &kp MINUS
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&kp N1     &kp N2  &kp N3  &kp N4  &kp N5                      &kp N6          &kp N7        &kp N8          &kp N9           &kp N0
&kp F1     &kp F2  &kp F3  &kp F4  &kp F5  &kp F6      &kp F7  &kp F8          &kp F9        &kp F10         &kp F11          &kp F12
&kp LSHFT  &trans  &trans  &trans  &trans  &trans      &trans  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LSHFT
&trans     &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        NUM {
            bindings = <
&kp MINUS     &kp N7  &kp N8   &kp N9         &kp LS(N8)                          &kp LS(N9)  &kp LS(N1)    &kp LS(SLASH)  &kp MINUS    &kp LS(EQUAL)
&kp SLASH     &kp N4  &kp N5   &kp N6         &kp RBKT      &trans      &kp LBKT  &kp NUHS    &kp LS(N2)    &kp LS(N7)     &kp SEMI     &kp SQT
&kp LS(SEMI)  &kp N1  &kp N2   &kp N3         &kp LS(RBKT)  &trans      &trans    &kp RBRC    &kp LS(INT1)  &kp LS(COMMA)  &kp LS(DOT)  &kp LS(N5)
&kp LS(SQT)   &kp N0  &kp DOT  &kp LS(MINUS)  &trans        &trans      &trans    &trans                                                &kp LS(N6)
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                          &trans          &kp UP_ARROW    &trans          &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans     &trans          &trans          &trans          &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &kp PSCRN  &trans                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &mkp MB4   &mkp MCLK  &mkp MB5           &trans                                      &trans  &mkp MB4   &mkp MCLK  &mkp MB5   &trans
&trans  &mkp LCLK  &trans     &mkp RCLK          &trans      &mkp LCLK            &trans     &trans  &mkp LCLK  &trans     &mkp RCLK  &trans
&trans  &trans     &trans     &trans             &trans      &mkp RCLK            &trans     &trans  &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP      &kp PSCRN  &trans                                   &trans
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans     &trans      &studio_unlock  &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kt KP_N4  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans     &trans      &trans          &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
